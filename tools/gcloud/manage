#!/usr/bin/env bash
#
# @license
# Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
# This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
# The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
# The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
# Code distributed by Google as part of the polymer project is also
# subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
#

set -e

# Optional worker settings.
#
# See server.js for the full list & documentation.

PORT=2727
CONCURRENCY=10
JITTER=250
ITEM_TIMEOUT=1800000
GITHUB_WEBHOOK_PATH=/github
VALID_PUSH_BRANCHES=master
MAX_TEST_RUNNER_TIMEOUT=1800000

# Docker-specific configuration.

PUBLIC_PORT=80
DOCKER_IMAGE=polymerlabs/ci-runner
MACHINE_IMAGE_NAME=container-vm-v20140731
MACHINE_IMAGE_PROJECT=google-containers
MACHINE_ZONE=us-central1-a
MACHINE_TYPE=n1-standard-2
WORKER_PREFIX=ci-runner

CONFIG_FILE=.polymer-ci-runner.sh

main() {
  # Margins are nice.
  echo
  trap echo EXIT

  command=${1:-help}
  if [[ ! $(declare -Ff run_$command) ]]; then
    fail "$command is not a known command"
  fi

  load_config
  validate_config
  run_$command "${@:2}"
}

# Commands

run_create() {
  worker_name=$WORKER_PREFIX-$(uuid)
  exec_gcloud compute instances create $worker_name \
    --image-project $MACHINE_IMAGE_PROJECT \
    --image         $MACHINE_IMAGE_NAME \
    --zone          $MACHINE_ZONE \
    --machine-type  $MACHINE_TYPE \
    --tags          http-server \
    --metadata \
      google-container-manifest="
        version: v1beta2
        containers:
        - name: $WORKER_PREFIX
          image: $DOCKER_IMAGE
          ports:
          - name: http
            hostPort: $PUBLIC_PORT
            containerPort: $PORT
          env:
          - name: PORT
            value: $PORT
          - name: WORKER_ID
            value: $worker_name
          - name: CONCURRENCY
            value: $CONCURRENCY
          - name: JITTER
            value: $JITTER
          - name: ITEM_TIMEOUT
            value: $ITEM_TIMEOUT
          - name: VALID_RUNNERS
            value: $VALID_RUNNERS
          - name: MAX_TEST_RUNNER_TIMEOUT
            value: $MAX_TEST_RUNNER_TIMEOUT

          - name: GITHUB_OAUTH_TOKEN
            value: $GITHUB_OAUTH_TOKEN
          - name: GITHUB_WEBHOOK_PATH
            value: $GITHUB_WEBHOOK_PATH
          - name: GITHUB_WEBHOOK_SECRET
            value: $GITHUB_WEBHOOK_SECRET
          - name: VALID_PUSH_BRANCHES
            value: $VALID_PUSH_BRANCHES

          - name: SAUCE_USERNAME
            value: $SAUCE_USERNAME
          - name: SAUCE_ACCESS_KEY
            value: $SAUCE_ACCESS_KEY

          - name: FIREBASE_ROOT
            value: $FIREBASE_ROOT
          - name: FIREBASE_SECRET
            value: $FIREBASE_SECRET

          - name: NOTIFICATION_SENDER
            value: $NOTIFICATION_SENDER
          - name: NOTIFICATION_RECIPIENTS
            value: $NOTIFICATION_RECIPIENTS
          - name: XOAUTH_USER
            value: $XOAUTH_USER
          - name: XOAUTH_CLIENT_ID
            value: $XOAUTH_CLIENT_ID
          - name: XOAUTH_CLIENT_SECRET
            value: $XOAUTH_CLIENT_SECRET
          - name: XOAUTH_REFRESH_TOKEN
            value: $XOAUTH_REFRESH_TOKEN
      "

  if [[ "$GCLOUD_TARGET_POOL" != "" ]]; then
    exec_gcloud compute target-pools add-instances $GCLOUD_TARGET_POOL \
      --instances $worker_name \
      --zone      $MACHINE_ZONE
  fi
}

run_list() {
  exec_gcloud compute instances list --regexp "$WORKER_PREFIX-.*"
}

run_delete() {
  exec_gcloud compute instances delete --zone $MACHINE_ZONE $(args_to_instances "$@")
}

run_update() {
  for instance in $(args_to_instances "$@"); do
    run_create
    run_delete $instance
  done
}

run_help() {
  set +e # read returns nonzero exit status.
  read -r -d '' text <<end_help
usage: $(c_green manage) $(c_cyan COMMAND ...)

Requires that you define a .polymer-ci-runner.sh somewhere up your path that
defines environment variables that configure this tool.

Commands:

  $(c_cyan create)
    Adds and starts a new instance to the worker pool.

  $(c_cyan delete) $(c_yellow INSTANCEID ...)
    Removes and shuts down the given instances, or $(c_yellow --all).

  $(c_cyan update) $(c_yellow INSTANCEID ...)
    Updates all running instances, or $(c_yellow --all).

  $(c_cyan list)
    Lists all instances
end_help
  set -e
  echo -e "$text"

  exit 1
}

# Utility

load_config() {
  if [[ -e "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
  else
    cd ..
    if [[ "$PWD" == '/' ]]; then
      fail "Unable to find $CONFIG_FILE anywhere up the path."
    else
      load_config
    fi
  fi
}

validate_config() {
  missing=()

  for var in GCLOUD_PROJECT GITHUB_OAUTH_TOKEN GITHUB_WEBHOOK_SECRET SAUCE_USERNAME SAUCE_ACCESS_KEY FIREBASE_ROOT; do
    eval value=\$$var
    if [[ ! "$value" ]]; then
      missing+=($var)
    fi
  done

  if [[ ${#missing[@]} -ne 0 ]]; then
    fail "Missing values from $CONFIG_FILE: ${missing[@]}"
  fi
}

uuid() {
  uuid=`uuidgen | awk '{ print tolower($1) }'`
  echo ${uuid:0:8}
}

exec_gcloud() {
  args=(gcloud --quiet --project "$GCLOUD_PROJECT" "$@")
  echo "> ${args[@]}"
  echo
  "${args[@]}"
  echo
}

instances() {
  gcloud compute instances list --project $GCLOUD_PROJECT | grep -E "^$WORKER_PREFIX-\w+" -o0
}

args_to_instances() {
  if [[ $1 == "--all" ]]; then
    echo "$(instances)"
  else
    echo "$@"
  fi
}

# Formatting

c_red() {
  echo "\033[0;31m$@\033[0m"
}

c_green() {
  echo "\033[0;32m$@\033[0m"
}

c_yellow() {
  echo "\033[0;33m$@\033[0m"
}

c_cyan() {
  echo "\033[0;36m$@\033[0m"
}

fail() {
  echo -e $(c_red "$@")
  echo
  run_help
  exit 1
}

main "$@"
